# -*- coding: utf-8 -*-
"""Logistic_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTphqG_5CIgrD-lXTXsBUhY9NgLHPGtD

## Classification Task
### Library and dataset Imports
"""

#imports pandas and numpy
import pandas as pd
import numpy as np
dt = pd.read_csv('wine.csv')

#Displays top 5 columns of the table
dt.head()

"""### Exploring data"""

print(dt['Wine'].unique()) #Displays the unique classes

x = dt.iloc[ : , :13] #Splitting Columns into x and y
y = dt.iloc[ : , 13]

x.shape #Shape of x (group of columns)

x #displays x (group of columns)

y.shape #Shape of y

y #Displays y, its length and data type

#importing train_test_split
from sklearn.model_selection import train_test_split 

#implementing train_test_split and defining size of data used to train the model
x_train, x_test, y_train, y_test = train_test_split(x,y,train_size=0.5)

"""### Implementing Logistic Regression"""

#importing Logistic Regression from Sklearn
from sklearn.linear_model import LogisticRegression

#implementing Logistic Regression
model = LogisticRegression()

#Defining Classifier
#Setting max not of iterations to 100000 and solver to 'ibfgs'
classifier = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100000, multi_class='multinomial', n_jobs=1,
          penalty='l2', random_state=None, solver='lbfgs', tol=0.0001,
          verbose=0, warm_start=False)

#implementing classifier 
classifier.fit(x_train, y_train)

#Assigning prediction value to y_pred
y_pred = classifier.predict(x_test)

#importing Confusion Matrix
from sklearn.metrics import confusion_matrix

#Confusion matrix between test value and predicted value
confusion_matrix(y_test, y_pred)

#printing into respective columns
print (pd.DataFrame(confusion_matrix(y_test, y_pred), columns=['Wine 1','Wine 2','Wine 3']))

"""### Report and Accuracy"""

#importing classification report from Sklearn
from sklearn.metrics import classification_report

#Printing Classification Report
print(classification_report(y_test, y_pred))

classifier.score(x_test,y_test)

